#!/usr/bin/env ruby

require "aws-sdk-elasticloadbalancingv2"

REGION = "us-west-2".freeze
tg_name = ARGV[0]
color = ARGV[1]
color_port = ARGV[2]

class AWSClient
  class << self
    def elbv2
      @elbv2 ||= Aws::ElasticLoadBalancingV2::Client.new(region: REGION)
    end
  end
end


if color_port == nil
  fail "Cannot detect current color_port. Color_port not passed in cli?"
elsif color == "green"
  puts "Switching to green"
elsif color == "blue"
  puts "Switching to blue"
else
  fail "Cannot detect current color. Color not passed in cli?"
end

tg = AWSClient.elbv2.describe_target_groups.target_groups.find { |x| x.target_group_name == "#{tg_name}" }
targets = AWSClient.elbv2.describe_target_health(target_group_arn: tg.target_group_arn)
            .target_health_descriptions.map(&:target)
targets_ids = targets.map(&:id)
targets_port = targets.map(&:port).uniq[0]

targets_ids.each do |i|
  AWSClient.elbv2.register_targets({
    target_group_arn: tg.target_group_arn, 
    targets: [
      {
        id: i,
        port: color_port,
      },
    ],
  })
end

targets_ids.each do |i|
  AWSClient.elbv2.wait_until(
    :target_in_service,
    target_group_arn: tg.target_group_arn,
    targets: [
      {
        id: i,
        port: color_port
      },
    ]
  )
end

puts color.capitalize + " target in service"
puts "De-registering an old one"

targets_ids.each do |i|
  AWSClient.elbv2.deregister_targets({
    target_group_arn: tg.target_group_arn, 
    targets: [
      {
        id: i,
        port: targets_port
      }, 
    ], 
  })
end

targets_ids.each do |i|
  AWSClient.elbv2.wait_until(
    :target_deregistered,
    target_group_arn: tg.target_group_arn,
    targets: [
      {
        id: i,
        port: targets_port
      },
    ]
  )
end

puts
puts "Blue-green switch completed"
