#!/usr/bin/env ruby

require "aws-sdk-elasticloadbalancingv2"

REGION = "us-west-2".freeze
tg_name = ARGV[0]
color = ARGV[1]
color_port = ARGV[2]
targets_list = ARGV[3]

if color_port.nil?
  fail "Cannot detect current color_port. Color_port not passed in cli?"
elsif ["blue", "green"].include?(color)
  puts "Switching to #{color}"
else
  fail "Cannot detect current color. Wrong color passed in cli?"
end

class AWSClient
  class << self
    def elbv2
      @elbv2 ||= Aws::ElasticLoadBalancingV2::Client.new(region: REGION)
    end
  end
end

tg = AWSClient.elbv2.describe_target_groups.target_groups.find { |x| x.target_group_name == tg_name }
targets = AWSClient.elbv2.describe_target_health(target_group_arn: tg.target_group_arn)
                   .target_health_descriptions.map(&:target)
targets_port = targets.map(&:port).uniq.first

if targets_list.nil?
  targets_ids = targets.map(&:id)
else
  targets_ids = targets_list.split(",")
end

new_targets = []

targets_ids.each do |i|
  new_targets <<
    {
      id: i,
      port: color_port
    }
end

AWSClient.elbv2.register_targets({
  target_group_arn: tg.target_group_arn,
  targets: new_targets
})

AWSClient.elbv2.wait_until(
  :target_in_service,
  target_group_arn: tg.target_group_arn,
  targets: new_targets
)

puts "\n#{color.capitalize} target in service"

if targets_port == color_port.to_i
  warn "WARNING: Currently active and new colors are the same. No changes performed!"
else
  puts "De-registering an old one"

  AWSClient.elbv2.deregister_targets({
    target_group_arn: tg.target_group_arn,
    targets: targets
  })

  AWSClient.elbv2.wait_until(
    :target_deregistered,
    target_group_arn: tg.target_group_arn,
    targets: targets
  )
end

puts "\nBlue-green switch completed"
