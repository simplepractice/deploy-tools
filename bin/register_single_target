#!/usr/bin/env ruby

require "aws-sdk-elasticloadbalancingv2"

host_id = ARGV[0]
tg_skip = ARGV[1]

if host_id.nil?
  fail "Please specify HOST_ID"
end

REGION = "us-west-2".freeze
class AWSClient
  class << self
    def elbv2
      @elbv2 ||= Aws::ElasticLoadBalancingV2::Client.new(region: REGION)
    end
  end
end

tgs = AWSClient.elbv2.describe_target_groups.target_groups

if !tg_skip.nil?
  tgs.reject! { |tg| tg_skip.include? tg.target_group_name }
end

for tg in tgs do
  targets = AWSClient.elbv2.describe_target_health(target_group_arn: tg.target_group_arn)
                  .target_health_descriptions.map(&:target)
  target_ports = targets.map(&:port).uniq

  AWSClient.elbv2.register_targets({
    target_group_arn: tg.target_group_arn,
    targets: [
      {
        id: host_id,
        port: target_ports[0]
      }
    ]
  })
end

for tg in tgs do
  targets = AWSClient.elbv2.describe_target_health(target_group_arn: tg.target_group_arn)
                  .target_health_descriptions.map(&:target)
  target_ports = targets.map(&:port).uniq

  AWSClient.elbv2.wait_until(
    :target_in_service,
    target_group_arn: tg.target_group_arn,
    targets: [
      {
        id: host_id,
        port: target_ports[0]
      }
    ]
  )
  puts "#{tg.target_group_name}:#{target_ports[0]} registered\n"
end

puts "\nTarget host registered back to all target groups\n"
